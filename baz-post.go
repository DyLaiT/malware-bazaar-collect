package main

import ("net/http"
		"net/url"
		"fmt"
		"io/ioutil"
		"os"
	   )

func recent_malware(selector string) {  
	resp, err := http.PostForm("https://mb-api.abuse.ch/api/v1/",  
							   url.Values{"query":{"get_recent"}, "selector":{selector}})  
	if err != nil {  
		fmt.Println(err)  
	}  

	defer resp.Body.Close()  
	body, err := ioutil.ReadAll(resp.Body)  
	if err != nil {  
	// handle error  
	}  

	fmt.Println(string(body))  
} 

func search_hash(file_hash string) string {  
	resp, err := http.PostForm("https://mb-api.abuse.ch/api/v1/",  
							   url.Values{"query":{"get_info"}, "hash":{file_hash}})  
	if err != nil {  
		fmt.Println(err)  
	}  

	defer resp.Body.Close()  
	body, err := ioutil.ReadAll(resp.Body)  
	if err != nil {  
	// handle error  
	}  

	fmt.Println(string(body))  
	return string(body)
} 
func download_malware(file_hash string) {  
	resp, err := http.PostForm("https://mb-api.abuse.ch/api/v1/",  
							   url.Values{"query":{"get_file"}, "sha256_hash":{file_hash}})  
	if err != nil {  
		fmt.Println(err)  
	}  
	
	defer resp.Body.Close()  
	body, err := ioutil.ReadAll(resp.Body)  
	if err != nil {  
		fmt.Println(err)  
		return
	}  
	
	file, err := os.Open(file_hash)
	if err != nil{
		fmt.Println(err)
		return
	}
	
	stat, err := file.Stat()
	if err != nil{
		fmt.Println(err)
		return
	}
	fmt.Println(stat)
	
	
	
	fmt.Println(string(body))  
} 

func main(){
	//search_hash("094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d")
	recent_malware("time")
	//download_malware("a5072c297cd80acffd9da5124dd8ff867da5abd6effc2dabea853fd93a8cccdc")

}
