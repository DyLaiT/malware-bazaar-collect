package main

import ("net/http"
		"net/url"
		"fmt"
		"io/ioutil"
		"os"
		"encoding/json"
		vt "github.com/VirusTotal/vt-go"
		"flag"
	   )



func recent_malware(selector string) []byte {  
	resp, err := http.PostForm("https://mb-api.abuse.ch/api/v1/",  
							   url.Values{"query":{"get_recent"}, "selector":{selector}})  
	if err != nil {  
		fmt.Println(err)  
	}  

	defer resp.Body.Close()  
	body, err := ioutil.ReadAll(resp.Body)  
	if err != nil {  
	// handle error  
	}  

	//fmt.Println(string(body))  
	return body
} 

func search_hash(file_hash string) []byte {  
	resp, err := http.PostForm("https://mb-api.abuse.ch/api/v1/",  
							   url.Values{"query":{"get_info"}, "hash":{file_hash}})  
	if err != nil {
		fmt.Println(err)  
	}  

	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)  
	if err != nil {  
	// handle error  
	}  

	//fmt.Println(string(body))  
	return body
} 

func json2interface(input_json []byte) []interface{}{
	var jsonObj map[string]interface{}
	json.Unmarshal(input_json, &jsonObj)
	//jsonObj["data"].([]interface{})[list_index].(map[string]interface{})["you_want_key"]
	return jsonObj["data"].([]interface{})
}

func vt_download(sha256 string, apikey string, file_path string){
	if apikey == "" || sha256 == "" {
		fmt.Println("Must pass both the sha256 hash and virustatol api key arguments.")
		os.Exit(0)
	}
	
	f, err := os.Create(file_path + sha256)
    if err != nil {
        panic(err)
    }
    defer f.Close()
	// create vt api client and download the sample
	client := vt.NewClient(apikey)
	client.DownloadFile(sha256, f)
}
func check_exist(file_path string) string{
	if len(file_path) > 0{
		if file_path[len(file_path)-1:] != "/" {
			file_path = file_path + "/"
		}
		if _, err := os.Stat(file_path); os.IsNotExist(err) {
		err := os.Mkdir(file_path, 0755)
			if err != nil {
				panic(err)
			}
		}
	}
	return file_path
}
func main(){
	// command line argument parse
	var storage_path string
	flag.StringVar(&storage_path, "p", "", "storage sample path")
	var apikey = flag.String("apikey", "", "VirusTotal API key")
	flag.Usage = func(){
		fmt.Fprintf(os.Stderr, "Usage: ./baz-post [options] \n")
		flag.PrintDefaults()
	}
	flag.Parse()
	// check path exist
	storage_path = check_exist(storage_path)
	//download sample from VT by bazaar hash
	recent_list :=json2interface(recent_malware("time"))
	for _, v := range recent_list{
		fmt.Println(v.(map[string]interface{})["sha256_hash"])
		vt_download(v.(map[string]interface{})["sha256_hash"].(string), *apikey, storage_path)
	}
}
